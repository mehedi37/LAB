.MODEL SMALL
.STACK 100H
.DATA
  NUM DW 100 DUP(0)
  LEN DW 0
  MSG1 DB 0DH, 0AH, 'ENTER SENTENCE: $'
  VOWEL_MSG DB 0DH, 0AH, 'NUMBER OF VOWELS: $'
  CONSONANT_MSG DB 0DH, 0AH, 'NUMBER OF CONSONANTS: $'
  VOWEL DW 0
  CONSONANT DW 0
  BEGIN DW 0

.CODE
MAIN PROC
  MOV AX, @DATA
  MOV DS, AX

  LEA DX, MSG1
  MOV AH, 09H
  INT 21H

  MOV CX, 100
  MOV BX, 0
  MOV AH, 01H
  LEA SI, NUM   ; SETTING SI TO POINT TO STARTING OF NUM[0]

  LOOP1:
    MOV AH, 01H
    INT 21H
    CMP AL, 0DH
    JE LOOP2
    MOV [SI], AL    ; SI POINTS TO NUM[0] AND AL IS STORED IN NUM[0] INITIALLY
    ADD LEN, 2
    ADD SI, 2   ; INCREMENTING SI BY 2 TO STORE NEXT CHARACTER. BECAUSE DW IS USED
    LOOP LOOP1

  LOOP2:
    MOV CX, LEN
    MOV DI, 0
    MOV AH, 01H

  MOV AX, LEN
  SUB AX, 2
  LEA SI, NUM
  MOV BEGIN, SI
  SUB BEGIN, 2

  ADD SI, AX  ; SI POINTS TO LAST CHARACTER OF NUM, TO INVERSLY ITERATE

  MOV DL, 0DH
  MOV AH, 02H
  INT 21H
  MOV DL, 0AH
  INT 21H


  LOOP3:
    MOV AL, [SI]
    ; PRINT IN REVERSE ORDER
    MOV DL, AL
    MOV AH, 02H
    INT 21H

    CMP SI, BEGIN
    JE LOOP4
    CMP AL, 'A'
    JE LOOP5
    CMP AL, 'E'
    JE LOOP5
    CMP AL, 'I'
    JE LOOP5
    CMP AL, 'O'
    JE LOOP5
    CMP AL, 'U'
    JE LOOP5
    CMP AL, 'a'
    JE LOOP5
    CMP AL, 'e'
    JE LOOP5
    CMP AL, 'i'
    JE LOOP5
    CMP AL, 'o'
    JE LOOP5
    CMP AL, 'u'
    JE LOOP5
    JMP LOOP6

  LOOP5:
    INC VOWEL
    JMP CONTINUE

  LOOP6:
    CMP AL, ' '
    JE CONTINUE

    INC CONSONANT
  CONTINUE:
    SUB SI, 2
    LOOP LOOP3

  LOOP4:
    LEA DX, VOWEL_MSG
    MOV AH, 09H
    INT 21H

    CMP VOWEL, 9
    JG MULTI_DIGIT
    JMP SINGLE_DIGIT

  MULTI_DIGIT:
    XOR DX, DX
    XOR BX, BX

    MOV CX, 10
    MOV AX, VOWEL
    DIV CX
    ADD DX, '0'
    MOV BX, DX
    ; MOV AH, 02H
    ; INT 21H
    ADD AX, '0'
    MOV DX, AX
    MOV AH, 02H
    INT 21H

    MOV DX, BX
    INT 21H
    JMP CONSONANT_LOOP

  SINGLE_DIGIT:
    ADD VOWEL,'0'
    MOV AH, 02H
    MOV DX, VOWEL
    INT 21H

  CONSONANT_LOOP:
    LEA DX, CONSONANT_MSG
    MOV AH, 09H
    INT 21H

    CMP CONSONANT, 9
    JG MULTI_DIGIT2
    JMP SINGLE_DIGIT2

  MULTI_DIGIT2:
    XOR DX, DX
    XOR BX, BX

    MOV CX, 10
    MOV AX, CONSONANT
    DIV CX
    ADD DX, '0'
    MOV BX, DX
    ADD AX, '0'
    MOV DX, AX
    MOV AH, 02H
    INT 21H

    MOV DX, BX
    INT 21H
    JMP @EXIT

  SINGLE_DIGIT2:
    ADD CONSONANT,'0'
    MOV AH, 02H
    MOV DX, CONSONANT
    INT 21H

  @EXIT:
    MOV AH, 4CH
    INT 21
MAIN ENDP
END MAIN